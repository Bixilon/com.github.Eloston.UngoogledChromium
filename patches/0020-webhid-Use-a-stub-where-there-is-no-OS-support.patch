From ea4244736170722826303ccf8065e196710bdb3e Mon Sep 17 00:00:00 2001
From: Ryan Gonzalez <rymg19@gmail.com>
Date: Wed, 11 Nov 2020 16:53:24 -0600
Subject: [PATCH 20/22] [webhid] Use a stub where there is no OS support

Without this, various sections of the code will crash when running on
Linux without udev support.
---
 services/device/hid/BUILD.gn            | 19 +++++++++++++----
 services/device/hid/hid_service.cc      |  4 +++-
 services/device/hid/hid_service_stub.cc | 27 ++++++++++++++++++++++++
 services/device/hid/hid_service_stub.h  | 28 +++++++++++++++++++++++++
 4 files changed, 73 insertions(+), 5 deletions(-)
 create mode 100644 services/device/hid/hid_service_stub.cc
 create mode 100644 services/device/hid/hid_service_stub.h

diff --git a/services/device/hid/BUILD.gn b/services/device/hid/BUILD.gn
index dbe298726895f..2d5454f6879af 100644
--- a/services/device/hid/BUILD.gn
+++ b/services/device/hid/BUILD.gn
@@ -27,10 +27,6 @@ source_set("hid") {
     "hid_manager_impl.h",
     "hid_service.cc",
     "hid_service.h",
-    "hid_service_mac.cc",
-    "hid_service_mac.h",
-    "hid_service_win.cc",
-    "hid_service_win.h",
   ]
 
   deps = [
@@ -49,6 +45,21 @@ source_set("hid") {
       "input_service_linux.h",
     ]
     deps += [ "//device/udev_linux" ]
+  } else if (is_mac) {
+    sources += [
+      "hid_service_mac.cc",
+      "hid_service_mac.h",
+    ]
+  } else if (is_win) {
+    sources += [
+      "hid_service_win.cc",
+      "hid_service_win.h",
+    ]
+  } else {
+    sources += [
+      "hid_service_stub.cc",
+      "hid_service_stub.h",
+    ]
   }
 
   if (is_chromeos) {
diff --git a/services/device/hid/hid_service.cc b/services/device/hid/hid_service.cc
index 056c83b638dd7..7fe7fc25a4a59 100644
--- a/services/device/hid/hid_service.cc
+++ b/services/device/hid/hid_service.cc
@@ -20,6 +20,8 @@
 #include "services/device/hid/hid_service_mac.h"
 #elif defined(OS_WIN)
 #include "services/device/hid/hid_service_win.h"
+#else
+#include "services/device/hid/hid_service_stub.h"
 #endif
 
 namespace device {
@@ -41,7 +43,7 @@ std::unique_ptr<HidService> HidService::Create() {
 #elif defined(OS_WIN)
   return base::WrapUnique(new HidServiceWin());
 #else
-  return nullptr;
+  return base::WrapUnique(new HidServiceStub());
 #endif
 }
 
diff --git a/services/device/hid/hid_service_stub.cc b/services/device/hid/hid_service_stub.cc
new file mode 100644
index 0000000000000..ddb97a4f61766
--- /dev/null
+++ b/services/device/hid/hid_service_stub.cc
@@ -0,0 +1,27 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "services/device/hid/hid_service_stub.h"
+
+#include "base/bind.h"
+#include "base/threading/sequenced_task_runner_handle.h"
+#include "services/device/hid/hid_connection.h"
+
+namespace device {
+
+HidServiceStub::HidServiceStub() = default;
+
+HidServiceStub::~HidServiceStub() = default;
+
+void HidServiceStub::Connect(const std::string& device_id,
+                             ConnectCallback callback) /*override*/ {
+  base::SequencedTaskRunnerHandle::Get()->PostTask(
+      FROM_HERE, base::BindOnce(std::move(callback), nullptr));
+}
+
+base::WeakPtr<HidService> HidServiceStub::GetWeakPtr() {
+  return weak_factory_.GetWeakPtr();
+}
+
+}  // namespace device
diff --git a/services/device/hid/hid_service_stub.h b/services/device/hid/hid_service_stub.h
new file mode 100644
index 0000000000000..f9ab184551d02
--- /dev/null
+++ b/services/device/hid/hid_service_stub.h
@@ -0,0 +1,28 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef SERVICES_DEVICE_HID_HID_SERVICE_STUB_H_
+#define SERVICES_DEVICE_HID_HID_SERVICE_STUB_H_
+
+#include "base/memory/weak_ptr.h"
+#include "services/device/hid/hid_service.h"
+
+namespace device {
+
+class HidServiceStub : public HidService {
+ public:
+  HidServiceStub();
+  ~HidServiceStub() override;
+
+  // HidService:
+  void Connect(const std::string& device_id, ConnectCallback callback) override;
+  base::WeakPtr<HidService> GetWeakPtr() override;
+
+ private:
+  base::WeakPtrFactory<HidServiceStub> weak_factory_{this};
+};
+
+}  // namespace device
+
+#endif
-- 
2.26.2

